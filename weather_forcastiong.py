# -*- coding: utf-8 -*-
"""Weather Forcastiong.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rqBEJiE6svuVsmovGNrJpKbktT7pNDxl
"""

import pandas as pd
import matplotlib.pyplot as plt
from time import strftime
import numpy as np
import time
from statsmodels.tools.eval_measures import rmse
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Dense
from keras.preprocessing.sequence import TimeseriesGenerator

data_=pd.read_excel("/content/Weather station data 2018-5-June-2020 (1).xlsx",parse_dates=True)

data_.head(5)

data=data_
data["TIMESTAMP"]=data["TIMESTAMP"].apply(lambda x: x.strftime("%d-%b-%Y"))

data.head(5)

data=data.set_index("TIMESTAMP")
data["TIMESTAMP"] = pd.to_datetime(data.index)

"""data=data.set_index("TIMESTAMP")
data['Year'] = data.index.year
data['Month'] = data.index.month
data['weekday_name'] = data.index.weekday_name
"""

data['AverageAirTemperature ']=data['AverageAirTemperature '].astype(float)
data['RelativeHumidity ']=data['RelativeHumidity '].astype(float)

cols_plot = ['Wind Speed','Solar Radiation','AverageAirTemperature ','RelativeHumidity ','Total Rainfall']
rspctive_unit=['meters/Second','MJ/m^2','Deg C','%','mm']
axes = data[cols_plot].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 14), subplots=True)
for ax,unit in zip(axes,rspctive_unit):
    ax.set_ylabel('{}'.format(unit))

data.columns

new_data=data.drop(['CR1000XSeries','CR1000X','CR1000X.Std.01.02','CPU:GeneralWeatherStation_v5.CR1X','WS_ms','Max Air Temp','Min Air Temp','Unnamed: 13','Unnamed: 14','Unnamed: 15','Unnamed: 16','Unnamed: 17','Unnamed: 18','Unnamed: 19','TIMESTAMP'],axis=1)

cols_plot = ['Wind Speed','Solar Radiation','AverageAirTemperature ','RelativeHumidity ','Total Rainfall']
rspctive_unit=['meters/Second','MJ/m^2','Deg C','%','mm']
axes = new_data[cols_plot]['16-Nov-2018':'16-Dec-2018'].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 14), subplots=True)
for ax,unit in zip(axes,rspctive_unit):
    ax.set_ylabel('{}'.format(unit))

train_size=len(new_data)*90//100
test_size=len(new_data)-train_size
print("Train Size {}".format(train_size))
print("Test Size {}".format(test_size))
print("Total Instance {}".format(len(new_data)))



train_data,test_data=new_data[:-1224],new_data[-12246:]
print("Train data Instance {}".format(len(train_data)))
print("Test data instance {}".format(len(test_data)))

scaler=MinMaxScaler()
scaler.fit(train_data)
train=scaler.transform(train_data)
test=scaler.transform(test_data)

n_input=12246
n_feature=5
generator=TimeseriesGenerator(train,train,length=n_input,batch_size=6)

model=Sequential()
model.add(LSTM(200,activation='relu',input_shape=(n_input,n_feature)))
model.add(Dropout(0.5))
model.add(Dense(5))
model.compile(optimizer='adam',loss='mse')
model.summary()

model.fit(generator,epochs=300)